<?php
/**
 * @package  Asia Home Shops
 */
namespace App\Base;

defined( 'ABSPATH' ) || exit;

class BillingController 
{
    public function register()
	{
		add_filter( 'woocommerce_checkout_fields' , array($this,'add_custom_billing_info') ,PHP_INT_MAX);
        add_action( 'woocommerce_admin_order_data_after_shipping_address', array($this,'display_my_custom_billing_info'), 10, 1 );
        
        // Hook in
        add_filter( 'woocommerce_default_address_fields' , [$this,'custom_override_default_address_fields'] );
        
        // Hook in
        add_filter( 'woocommerce_checkout_fields' , [$this,'custom_override_checkout_fields'] );
        add_filter( 'woocommerce_checkout_fields', [$this,'remove_email'] , PHP_INT_MAX );


        add_filter( 'woocommerce_checkout_fields' , [$this,'custom_override_checkout_fields_ek'], 99 );
        

        add_filter('woocommerce_billing_fields', [$this,'wpb_custom_billing_fields']);

        add_filter( 'woocommerce_order_formatted_billing_address' , [$this,'woo_reorder_billing_fields'], 10, 2 );
        
        
	}

    public function add_custom_billing_info( $fields )
    {
        # code...
        $fields['billing']['codigo_telefono'] = array(
            // 'placeholder' => _x('', 'placeholder', 'woocommerce'),
            'required'    => true,
            'clear'       => false,
            'type'        => 'select',
            'label' => __('Codigo Telefono', 'woocommerce'),
            'priority'        => 90,
            'class'     => array('form-row-first', 'widto-little'),
            'options'     => array(
                "option52" => "ðŸ‡»ðŸ‡ª+58",
                "option0" => "ðŸ‡¨ðŸ‡¦+1",
                "option1" => "ðŸ‡ºðŸ‡¸+1",
                "option2" => "ðŸ‡·ðŸ‡º+7",
                "option3" => "ðŸ‡ªðŸ‡¬+20",
                "option4" => "ðŸ‡¿ðŸ‡¦+27",
                "option5" => "ðŸ‡¬ðŸ‡·+30",
                "option6" => "ðŸ‡³ðŸ‡±+31",
                "option7" => "ðŸ‡§ðŸ‡ª+32",
                "option8" => "ðŸ‡«ðŸ‡·+33",
                "option9" => "ðŸ‡ªðŸ‡¸+34",
                "option10" => "ðŸ‡­ðŸ‡º+36",
                "option11" => "ðŸ‡®ðŸ‡¹+39",
                "option12" => "ðŸ‡·ðŸ‡´+40",
                "option13" => "ðŸ‡¨ðŸ‡­+41",
                "option14" => "ðŸ‡¦ðŸ‡¹+43",
                "option15" => "ðŸ‡¬ðŸ‡§+44",
                "option16" => "ðŸ‡¬ðŸ‡¬+44",
                "option17" => "ðŸ‡®ðŸ‡²+44",
                "option18" => "ðŸ‡¯ðŸ‡ª+44",
                "option19" => "ðŸ‡©ðŸ‡°+45",
                "option20" => "ðŸ‡¸ðŸ‡ª+46",
                "option21" => "ðŸ‡³ðŸ‡´+47",
                "option22" => "ðŸ‡¸ðŸ‡¯+47",
                "option23" => "ðŸ‡µðŸ‡±+48",
                "option24" => "ðŸ‡©ðŸ‡ª+49",
                "option25" => "ðŸ‡µðŸ‡ª+51",
                "option26" => "ðŸ‡²ðŸ‡½+52",
                "option27" => "ðŸ‡¨ðŸ‡º+53",
                "option28" => "ðŸ‡¦ðŸ‡·+54",
                "option29" => "ðŸ‡§ðŸ‡·+55",
                "option30" => "ðŸ‡¨ðŸ‡±+56",
                "option31" => "ðŸ‡¨ðŸ‡´+57",
                "option32" => "ðŸ‡²ðŸ‡¾+60",
                "option33" => "ðŸ‡¦ðŸ‡º+61",
                "option34" => "ðŸ‡¨ðŸ‡¨+61",
                "option35" => "ðŸ‡¨ðŸ‡½+61",
                "option36" => "ðŸ‡®ðŸ‡©+62",
                "option37" => "ðŸ‡µðŸ‡­+63",
                "option38" => "ðŸ‡³ðŸ‡¿+64",
                "option39" => "ðŸ‡¸ðŸ‡¬+65",
                "option40" => "ðŸ‡¹ðŸ‡­+66",
                "option41" => "ðŸ‡¯ðŸ‡µ+81",
                "option42" => "ðŸ‡°ðŸ‡·+82",
                "option43" => "ðŸ‡»ðŸ‡³+84",
                "option44" => "ðŸ‡¨ðŸ‡³+86",
                "option45" => "ðŸ‡¹ðŸ‡·+90",
                "option46" => "ðŸ‡®ðŸ‡³+91",
                "option47" => "ðŸ‡µðŸ‡°+92",
                "option48" => "ðŸ‡¦ðŸ‡«+93",
                "option49" => "ðŸ‡±ðŸ‡°+94",
                "option50" => "ðŸ‡²ðŸ‡²+95",
                "option51" => "ðŸ‡®ðŸ‡·+98",
            )
        );
        $fields['billing']['codigo_documento'] = array(
            // 'placeholder' => _x('', 'placeholder', 'woocommerce'),
            'required'    => true,
            'clear'       => false,
            'type'        => 'select',
            'label' => __('Codigo Documento', 'woocommerce'),
            'priority'        => 100,
            'class'     => array('form-row-first', 'widto-little'),
            'options'     => array(
                'option_1' => 'V-',
                'option_2' => 'E-',
                'option_3' => 'J-',
            )
        );    
        return $fields;
    }

    public function display_my_custom_billing_info($order){
        echo '<p><strong>'.__('Phone From Checkout Form').':</strong> ' . get_post_meta( $order->get_id(), '_codigo_telefono', true ) . '</p>';
    }


    // Our hooked in function - $fields is passed via the filter!
    function custom_override_checkout_fields( $fields ) {
        // $fields['billing']['billing_company']['class'][0] = 'form-row-first';
        $fields['billing']['billing_country']['class'][1] = 'form-row-first';
        $fields['billing']['billing_phone']['class'][2] = 'form-row-first';
        $fields['billing']['billing_email']['class'][1] = 'form-row-last';
        $fields['billing']['billing_email']['priority'] = 130 ;

        $fields['billing']['envios'] = array(
            'required'    => false,
            'clear'       => false,
            'type'        => 'select',
            'label'       => __('CompaÃ±ias de envio (Cobro a destino)', 'woocommerce'),
            'priority'    => 140,
            'class'       => array('form-row-wide', 'envios','none'),
            'options'     => array(
                'envio_1' => 'MRW',
                'envio_2' => 'Domesa',
                'envio_3' => 'Zoom',
                'envio_4' => 'Tealca',
            )
        );   
        
        // $fields['shipping']['shipping_company']['class'][0] = 'form-row-first';
        $fields['shipping']['shipping_country']['class'][0] = 'form-row-first';
        $fields['shipping']['shipping_address_1']['class'][0] = 'form-row-first';
        $fields['shipping']['shipping_city']['class'][1] = 'form-row-first';
        $fields['shipping']['shipping_state']['class'][1] = 'form-row-last';

        return $fields;
    }


    // Our hooked in function - $address_fields is passed via the filter!
    function custom_override_default_address_fields( $address_fields ) {
        $address_fields['address_1']['class'][0] = 'form-row-last';

        return $address_fields;
    }

    // remove some fields from billing form
    // ref - https://docs.woothemes.com/document/tutorial-customising-checkout-fields-using-actions-and-filters/
    function wpb_custom_billing_fields( $fields = array() ) {

        unset($fields['billing_company']);
        return $fields;
    }

    /**
    * This function is used for remove email field from the checkout
    * 
    * @name _custom_checkout_fields
    * @param array $address_fields  array of the address fields
    */
    function remove_email( $address_fields ) {
        if( is_user_logged_in() ) {
            unset( $address_fields['billing']['billing_email'] );
        }
        return $address_fields;
    }
   // Remove some fields from billing form
        // Our hooked in function - $fields is passed via the filter!
        // Get all the fields - https://docs.woothemes.com/document/tutorial-customising-checkout-fields-using-actions-and-filters/
    function custom_override_checkout_fields_ek( $fields ) {
        unset($fields['shipping']['shipping_company']);
        unset($fields['shipping']['shipping_address_2']);
        unset($fields['shipping']['shipping_postcode']);
        return $fields;
    }

    function woo_reorder_billing_fields( $address, $wc_order ) {

        $address = array(
            'first_name'    => $wc_order->billing_first_name,
            'last_name'     => $wc_order->billing_last_name,
            'company'       => $wc_order->billing_company,
            'country'       => $wc_order->billing_country,
            'state'         => $wc_order->billing_state,
            'city'          => $wc_order->billing_city,
        );

        return $address;
    }
}